name: Build and Sign macOS App

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - '!.github/workflows/build.yml'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install the Apple certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create a temporary file for the certificate
        CERTIFICATE_PATH=$RUNNER_TEMP/developer_id_cert.p12
        
        # Decode the base64 certificate into the temporary file
        echo -n "$CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
        
        # Create a keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import the certificate to the keychain
        security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Verify the certificate was imported correctly
        security find-identity -v -p codesigning $KEYCHAIN_PATH
        
    - name: Install provisioning profile
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      run: |
        # Create the directory for provisioning profiles if it doesn't exist
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        
        # Create a temporary file for the profile and verify it's properly decoded
        TEMP_PROFILE=$RUNNER_TEMP/profile.provisionprofile
        echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $TEMP_PROFILE
        
        # Check if the file was created and has content
        if [ ! -s "$TEMP_PROFILE" ]; then
          echo "ERROR: Failed to decode provisioning profile. Check the base64 encoding."
          exit 1
        fi
        
        # Copy to the correct location with a unique name based on UUID
        UUID=$(grep -a -A 1 "UUID" "$TEMP_PROFILE" | grep -o "[-A-Z0-9]\{36\}")
        if [ -z "$UUID" ]; then
          echo "WARNING: Could not extract UUID from profile, using a timestamp instead"
          UUID=$(date +%s)
        fi
        
        PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/$UUID.provisionprofile
        cp "$TEMP_PROFILE" "$PROFILE_PATH"
        
        # Display that the profile was installed successfully
        echo "Provisioning profile installed at: $PROFILE_PATH"
        echo "Profile UUID: $UUID"
        
    - name: Create export options file
      run: |
        echo '<?xml version="1.0" encoding="UTF-8"?>' > exportOptions.plist
        echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> exportOptions.plist
        echo '<plist version="1.0">' >> exportOptions.plist
        echo '<dict>' >> exportOptions.plist
        echo '    <key>method</key>' >> exportOptions.plist
        echo '    <string>developer-id</string>' >> exportOptions.plist
        echo '    <key>teamID</key>' >> exportOptions.plist
        echo '    <string>43TJNHX42U</string>' >> exportOptions.plist
        echo '    <key>signingStyle</key>' >> exportOptions.plist
        echo '    <string>manual</string>' >> exportOptions.plist
        echo '    <key>provisioningProfiles</key>' >> exportOptions.plist
        echo '    <dict>' >> exportOptions.plist
        echo '        <key>com.foxycorps.Review</key>' >> exportOptions.plist
        echo '        <string>Review Developer ID</string>' >> exportOptions.plist
        echo '    </dict>' >> exportOptions.plist
        echo '    <key>signingCertificate</key>' >> exportOptions.plist
        echo '    <string>Developer ID Application</string>' >> exportOptions.plist
        echo '    <key>skipPackagePluginValidation</key>' >> exportOptions.plist
        echo '    <true/>' >> exportOptions.plist
        echo '    <key>compileBitcode</key>' >> exportOptions.plist
        echo '    <false/>' >> exportOptions.plist
        echo '</dict>' >> exportOptions.plist
        echo '</plist>' >> exportOptions.plist
        
    - name: Build and Archive
      run: |
        # Build the project with special handling for package dependencies
        xcodebuild archive \
          -project Review.xcodeproj \
          -scheme Review \
          -archivePath ./build/Review.xcarchive \
          -destination "generic/platform=macOS" \
          CODE_SIGN_IDENTITY="Developer ID Application" \
          DEVELOPMENT_TEAM=43TJNHX42U \
          OTHER_CODE_SIGN_FLAGS="--options=runtime"
          
        # Check if archive was successful
        if [ ! -d "./build/Review.xcarchive" ]; then
          echo "ERROR: Archive failed to create"
          exit 1
        fi
        
    - name: Export Archive
      run: |
        # Export the archive using our custom exportOptions.plist
        xcodebuild -exportArchive \
          -archivePath ./build/Review.xcarchive \
          -exportPath ./build/Export \
          -exportOptionsPlist exportOptions.plist
          
        # Check if export was successful
        if [ ! -d "./build/Export/Review.app" ]; then
          echo "ERROR: Export failed to create the app"
          exit 1
        fi
        
    - name: Notarize App
      env:
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
        # Create a temporary file to store the password
        PASS_TEMP_FILE=$RUNNER_TEMP/notarize_password
        echo -n "$APP_SPECIFIC_PASSWORD" > "$PASS_TEMP_FILE"
        
        # Create a ZIP for notarization
        ditto -c -k --keepParent "./build/Export/Review.app" "./build/Review.zip"
        
        # Submit for notarization
        echo "Submitting app for notarization..."
        xcrun notarytool submit "./build/Review.zip" \
          --apple-id "slyfoxalpha@gmail.com" \
          --team-id "43TJNHX42U" \
          --password "$PASS_TEMP_FILE" \
          --wait
          
        # Remove the password file
        rm "$PASS_TEMP_FILE"
        
        # Staple the notarization ticket
        xcrun stapler staple "./build/Export/Review.app"
        
    - name: Create DMG
      run: |
        # Create a temporary directory for DMG creation
        TEMP_DMG_DIR=$RUNNER_TEMP/dmg_temp
        mkdir -p "$TEMP_DMG_DIR"
        
        # Copy the app to the temporary directory
        cp -R "./build/Export/Review.app" "$TEMP_DMG_DIR/"
        
        # Create a symlink to /Applications for easy installation
        ln -s /Applications "$TEMP_DMG_DIR/"
        
        # Create the DMG
        hdiutil create -volname "Review" -srcfolder "$TEMP_DMG_DIR" -ov -format UDZO "./build/Review.dmg"
        
        # Check if DMG was created successfully
        if [ ! -f "./build/Review.dmg" ]; then
          echo "ERROR: Failed to create DMG"
          exit 1
        fi
        
        echo "DMG created successfully at ./build/Review.dmg"
        
    - name: Upload app
      uses: actions/upload-artifact@v4
      with:
        name: Review.app
        path: build/Export/Review.app
        
    - name: Upload DMG
      uses: actions/upload-artifact@v4
      with:
        name: Review.dmg
        path: build/Review.dmg 