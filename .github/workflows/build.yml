name: Build and Sign macOS App

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - '!.github/workflows/build.yml'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install the Apple certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create a temporary file for the certificate
        CERTIFICATE_PATH=$RUNNER_TEMP/developer_id_cert.p12
        
        # Decode the base64 certificate into the temporary file
        echo -n "$CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
        
        # Create a keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import the certificate to the keychain
        security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Verify the certificate was imported correctly
        security find-identity -v -p codesigning $KEYCHAIN_PATH
        
    - name: Install and Validate Provisioning Profile
      run: |
        # Debug: Show environment information
        echo "Running as user: $(whoami)"
        echo "Home directory: $HOME"
        
        # Create the profiles directory
        PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PROFILES_DIR"
        echo "‚úÖ Created profiles directory at: $PROFILES_DIR"
        
        # Create a temporary file for the profile
        TEMP_PROFILE=$RUNNER_TEMP/profile.mobileprovision
        echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $TEMP_PROFILE
        
        # Verify the file was created and has content
        if [ ! -s "$TEMP_PROFILE" ]; then
          echo "‚ùå ERROR: Failed to decode provisioning profile. Check the base64 encoding."
          exit 1
        fi
        
        echo "‚úÖ Profile decoded successfully, size: $(wc -c < $TEMP_PROFILE) bytes"
        
        # Examine file type
        echo "Examining file type:"
        FILE_TYPE=$(file -b "$TEMP_PROFILE")
        echo "File type: $FILE_TYPE"
        
        # Verify it's a provisioning profile not a certificate
        if [[ "$FILE_TYPE" == *"Certificate"* ]]; then
          echo "‚ùå ERROR: The file appears to be a certificate, not a provisioning profile."
          echo "Please make sure you're uploading a .mobileprovision file from Apple Developer Portal."
          exit 1
        fi
        
        # Try to extract profile information
        echo "Examining profile contents:"
        security cms -D -i "$TEMP_PROFILE" > "$RUNNER_TEMP/profile.plist" 2>/dev/null || true
        
        if [ -s "$RUNNER_TEMP/profile.plist" ]; then
          echo "‚úÖ Successfully extracted profile information"
          
          # Extract UUID using plutil
          UUID=$(plutil -extract UUID xml1 -o - "$RUNNER_TEMP/profile.plist" 2>/dev/null | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          
          if [ -n "$UUID" ]; then
            echo "‚úÖ Found UUID: $UUID"
          else
            echo "‚ö†Ô∏è Could not extract UUID through normal means, trying alternate methods..."
            
            # Try grep method
            UUID=$(strings "$TEMP_PROFILE" | grep -o "[-A-Z0-9]\{36\}" | head -1)
            
            if [ -n "$UUID" ]; then
              echo "‚úÖ Found UUID using pattern matching: $UUID"
            else
              echo "‚ö†Ô∏è No valid UUID found, using timestamp instead"
              UUID=$(date +%s)
            fi
          fi
          
          # Extract app ID and team ID for verification
          APP_ID=$(plutil -extract Entitlements.application-identifier xml1 -o - "$RUNNER_TEMP/profile.plist" 2>/dev/null | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - "$RUNNER_TEMP/profile.plist" 2>/dev/null | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          PROFILE_NAME=$(plutil -extract Name xml1 -o - "$RUNNER_TEMP/profile.plist" 2>/dev/null | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          
          echo "Profile information:"
          echo "- Name: ${PROFILE_NAME:-Unknown}"
          echo "- App ID: ${APP_ID:-Unknown}"
          echo "- Team ID: ${TEAM_ID:-Unknown}"
          
          # Copy with proper extension
          PROFILE_PATH="$PROFILES_DIR/$UUID.mobileprovision"
          cp "$TEMP_PROFILE" "$PROFILE_PATH"
          
          if [ -f "$PROFILE_PATH" ]; then
            echo "‚úÖ Provisioning profile installed successfully at: $PROFILE_PATH"
            echo "Installed profiles:"
            ls -la "$PROFILES_DIR"
          else
            echo "‚ùå Failed to copy provisioning profile to $PROFILE_PATH"
            echo "Checking permissions:"
            ls -la "$PROFILES_DIR"
            exit 1
          fi
          
        else
          echo "‚ùå ERROR: The file does not appear to be a valid provisioning profile."
          echo "Could not extract profile information using security cms."
          echo "Please ensure you're uploading the correct .mobileprovision file."
          exit 1
        fi
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}

    - name: Create Export Options Plist
      run: |
        cat > exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>teamID</key>
            <string>43TJNHX42U</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.foxycorps.Review</key>
                <string>Review Developer ID</string>
            </dict>
            <key>signingCertificate</key>
            <string>Developer ID Application</string>
            <key>skipPackagePluginValidation</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        echo "‚úÖ Created exportOptions.plist:"
        cat exportOptions.plist

    - name: Build and Archive
      run: |
        # First, let's check the project setup
        echo "üìÇ Project structure:"
        ls -la
        
        # Check Xcode project
        echo "üìã Xcode project schemes:"
        xcodebuild -project Review.xcodeproj -list
        
        # Create build directory
        mkdir -p ./build
        
        # Build the project with verbose output
        echo "üî® Building and archiving project..."
        set -o pipefail && xcodebuild archive \
          -project Review.xcodeproj \
          -scheme Review \
          -archivePath ./build/Review.xcarchive \
          -destination "generic/platform=macOS" \
          CODE_SIGN_IDENTITY="Developer ID Application" \
          DEVELOPMENT_TEAM=43TJNHX42U \
          OTHER_CODE_SIGN_FLAGS="--options=runtime" \
          -verbose | tee build_log.txt
        
        build_status=$?
        if [ $build_status -ne 0 ] || [ ! -d "./build/Review.xcarchive" ]; then
          echo "‚ùå ERROR: Archive failed to create (exit code: $build_status)"
          echo "Build log (last 100 lines):"
          tail -n 100 build_log.txt
          echo "Checking keychain and provisioning profiles:"
          security find-identity -v -p codesigning
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/"
          exit 1
        fi
        
        echo "‚úÖ Archive created successfully at ./build/Review.xcarchive"
        echo "Archive contents:"
        ls -la ./build/Review.xcarchive

    - name: Export App
      run: |
        echo "üì¶ Exporting archive to .app..."
        set -o pipefail && xcodebuild -exportArchive \
          -archivePath ./build/Review.xcarchive \
          -exportOptionsPlist exportOptions.plist \
          -exportPath ./build \
          -verbose | tee export_log.txt
        
        export_status=$?
        if [ $export_status -ne 0 ] || [ ! -d "./build/Review.app" ]; then
          echo "‚ùå ERROR: Export failed (exit code: $export_status)"
          echo "Export log (last 100 lines):"
          tail -n 100 export_log.txt
          exit 1
        fi
        
        echo "‚úÖ App exported successfully to ./build/Review.app"
        echo "App contents:"
        ls -la ./build/Review.app

    - name: Notarize App
      run: |
        # Package the app for notarization
        echo "üîê Creating ZIP for notarization..."
        ditto -c -k --keepParent "./build/Review.app" "./build/Review.zip"
        
        # Verify the ZIP file exists and has content
        if [ ! -s "./build/Review.zip" ]; then
          echo "‚ùå ERROR: Failed to create ZIP for notarization"
          exit 1
        fi
        
        echo "üì§ Submitting app for notarization... (this may take several minutes)"
        xcrun notarytool submit "./build/Review.zip" \
          --apple-id "$NOTARIZATION_USERNAME" \
          --password "$NOTARIZATION_PASSWORD" \
          --team-id "$TEAM_ID" \
          --wait | tee notarization_log.txt
          
        # Check the notarization status
        if ! grep -q "success" notarization_log.txt; then
          echo "‚ùå ERROR: Notarization failed. See log for details:"
          cat notarization_log.txt
          exit 1
        fi
        
        # Staple the notarization ticket to the app
        echo "üìù Stapling notarization ticket to app..."
        xcrun stapler staple "./build/Review.app"
        stapler_status=$?
        
        if [ $stapler_status -ne 0 ]; then
          echo "‚ùå ERROR: Failed to staple notarization ticket (exit code: $stapler_status)"
          exit 1
        fi
        
        echo "‚úÖ App notarized and stapled successfully"
      env:
        NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
        NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
        TEAM_ID: "43TJNHX42U"

    - name: Create DMG
      run: |
        # Create a temporary DMG directory
        TEMP_DMG_DIR="./build/temp_dmg"
        mkdir -p "$TEMP_DMG_DIR"
        
        # Copy the app to the temporary directory
        cp -R "./build/Review.app" "$TEMP_DMG_DIR/"
        
        # Create a symlink to /Applications for easy installation
        ln -s /Applications "$TEMP_DMG_DIR/Applications"
        
        # Create the DMG
        echo "üìÄ Creating DMG file..."
        hdiutil create -volname "Review" -srcfolder "$TEMP_DMG_DIR" -ov -format UDZO "./build/Review.dmg"
        
        # Verify the DMG was created successfully
        if [ ! -f "./build/Review.dmg" ]; then
          echo "‚ùå ERROR: Failed to create DMG file"
          exit 1
        fi
        
        echo "‚úÖ DMG created successfully at ./build/Review.dmg"
        ls -la ./build/Review.dmg

    - name: Upload App
      uses: actions/upload-artifact@v4
      with:
        name: Review.app
        path: build/Review.app
        
    - name: Upload DMG
      uses: actions/upload-artifact@v4
      with:
        name: Review.dmg
        path: build/Review.dmg 